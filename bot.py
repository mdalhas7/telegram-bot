import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import openai

# ‡¶≤‡ßã‡¶ó‡¶ø‡¶Ç (‡¶°‡¶ø‡¶¨‡¶æ‡¶óging-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# API Key ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶ì
TELEGRAM_TOKEN = os.environ['BOT_TOKEN']
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']

# OpenAI ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞
openai.api_key = OPENAI_API_KEY

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    await update.message.reply_text(f"üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã {user_name}! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡ßá‡¶∏ ‡¶ï‡¶∞‡ßã, ‡¶Ü‡¶Æ‡¶ø AI ‡¶¶‡¶ø‡ßü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶¨!")

# ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ GPT ‡¶¶‡¶ø‡ßü‡ßá
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì
            messages=[
                {"role": "user", "content": user_input}
            ]
        )
        reply = response['choices'][0]['message']['content']
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§")
        logging.error(e)

# ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶Ç‡¶∂
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()
    
